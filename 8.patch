diff --git a/linux-3.19/Makefile b/linux-3.19/Makefile
index b15036b..70f5419 100644
--- a/linux-3.19/Makefile
+++ b/linux-3.19/Makefile
@@ -879,7 +879,7 @@ export mod_sign_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ rtnice/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/linux-3.19/arch/x86/syscalls/syscall_64.tbl b/linux-3.19/arch/x86/syscalls/syscall_64.tbl
index 8d656fb..20ea7cd 100644
--- a/linux-3.19/arch/x86/syscalls/syscall_64.tbl
+++ b/linux-3.19/arch/x86/syscalls/syscall_64.tbl
@@ -329,6 +329,7 @@
 320	common	kexec_file_load		sys_kexec_file_load
 321	common	bpf			sys_bpf
 322	64	execveat		stub_execveat
+323	64	rtnice			sys_rtnice
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/linux-3.19/include/linux/sched.h b/linux-3.19/include/linux/sched.h
index 8db31ef..e725f93 100644
--- a/linux-3.19/include/linux/sched.h
+++ b/linux-3.19/include/linux/sched.h
@@ -1168,6 +1168,7 @@ struct sched_entity {
 	u64			sum_exec_runtime;
 	u64			vruntime;
 	u64			prev_sum_exec_runtime;
+	long			s_runtime;
 
 	u64			nr_migrations;
 
diff --git a/linux-3.19/include/linux/syscalls.h b/linux-3.19/include/linux/syscalls.h
index 85893d7..a7d1197 100644
--- a/linux-3.19/include/linux/syscalls.h
+++ b/linux-3.19/include/linux/syscalls.h
@@ -881,5 +881,6 @@ asmlinkage long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);
 asmlinkage long sys_execveat(int dfd, const char __user *filename,
 			const char __user *const __user *argv,
 			const char __user *const __user *envp, int flags);
+asmlinkage long sys_rtnice(int pid, long s_runtime);
 
 #endif
diff --git a/linux-3.19/kernel/sched/core.c b/linux-3.19/kernel/sched/core.c
index 5eab11d..ce19ae2 100644
--- a/linux-3.19/kernel/sched/core.c
+++ b/linux-3.19/kernel/sched/core.c
@@ -1836,6 +1836,7 @@ static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	p->se.s_runtime			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_SCHEDSTATS
diff --git a/linux-3.19/kernel/sched/fair.c b/linux-3.19/kernel/sched/fair.c
index fe331fc..9d1ded7 100644
--- a/linux-3.19/kernel/sched/fair.c
+++ b/linux-3.19/kernel/sched/fair.c
@@ -456,6 +456,12 @@ static inline u64 min_vruntime(u64 min_vruntime, u64 vruntime)
 static inline int entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
+	if(a->s_runtime > 0 && b->s_runtime > 0)
+		return (s64)(a->s_runtime - b->s_runtime) < 0;
+	else if(a->s_runtime > 0)
+		return 1;
+	else if(b->s_runtime > 0)
+		return 0;
 	return (s64)(a->vruntime - b->vruntime) < 0;
 }
 
@@ -712,8 +718,18 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq, exec_clock, delta_exec);
 
-	curr->vruntime += calc_delta_fair(delta_exec, curr);
-	update_min_vruntime(cfs_rq);
+	if(curr->s_runtime > 0)
+	{
+		if(delta_exec > curr->s_runtime)
+			curr->s_runtime = 0;
+		else
+			curr->s_runtime -= delta_exec;
+	}
+	else
+	{
+		curr->vruntime += calc_delta_fair(delta_exec, curr);
+		update_min_vruntime(cfs_rq);
+	}
 
 	if (entity_is_task(curr)) {
 		struct task_struct *curtask = task_of(curr);
diff --git a/linux-3.19/rtnice/Makefile b/linux-3.19/rtnice/Makefile
new file mode 100644
index 0000000..57f75a2
--- /dev/null
+++ b/linux-3.19/rtnice/Makefile
@@ -0,0 +1 @@
+obj-y := rtnice.o
diff --git a/linux-3.19/rtnice/rtnice.c b/linux-3.19/rtnice/rtnice.c
new file mode 100644
index 0000000..d7f8c3d
--- /dev/null
+++ b/linux-3.19/rtnice/rtnice.c
@@ -0,0 +1,25 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/pid.h>
+#include <linux/pid_namespace.h>
+#include <linux/string.h>
+#include <linux/syscalls.h>
+#include <linux/fcntl.h>
+#include <asm/uaccess.h>
+#include <uapi/asm-generic/errno.h>
+
+struct pid *pid_struct;
+struct task_struct *task;
+
+asmlinkage long sys_rtnice(int pid, long s_runtime)
+{
+	if(s_runtime < 0)
+		return -EINVAL;
+	pid_struct = find_get_pid(pid);
+	if(pid_struct == NULL)
+		return -EINVAL;
+	task = pid_task(pid_struct, PIDTYPE_PID);
+	task->se.s_runtime = s_runtime;
+
+	return 0;
+}
